"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[679],{5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?i.createElement(f,l(l({ref:t},p),{},{components:n})):i.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4813:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var i=n(2685),a=n(1244),r=(n(7378),n(5318)),l=["components"],o={title:"Fields",sidebar_position:1},s=void 0,d={unversionedId:"modeling/fields",id:"modeling/fields",title:"Fields",description:"Fields are the primitive columns in your domain model, so all of the (non-foreign key) int, varchar, datetime, etc. columns.",source:"@site/docs/modeling/fields.md",sourceDirName:"modeling",slug:"/modeling/fields",permalink:"/docs/modeling/fields",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/modeling/fields.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Fields",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Great Tests",permalink:"/docs/goals/great-tests"},next:{title:"Relations",permalink:"/docs/modeling/relations"}},p={},u=[{value:"Optional vs Required",id:"optional-vs-required",level:2},{value:"Using <code>undefined</code> instead of <code>null</code>",id:"using-undefined-instead-of-null",level:3},{value:"Type Checked Construction",id:"type-checked-construction",level:3},{value:"Partial Updates Semantics",id:"partial-updates-semantics",level:3},{value:"Protected Fields",id:"protected-fields",level:2}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Fields are the primitive columns in your domain model, so all of the (non-foreign key) ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"varchar"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"datetime"),", etc. columns."),(0,r.kt)("p",null,"For these columns, Joist automatically adds getters & setters to your domain model, i.e. an ",(0,r.kt)("inlineCode",{parentName:"p"},"authors.first_name")," column will have getters & setters added to ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorCodegen.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// This code is auto-generated\nclass AuthorCodegen {\n  get firstName(): string {\n    return this.__orm.data["firstName"];\n  }\n\n  set firstName(firstName: string) {\n    setField(this, "firstName", firstName);\n  }\n}\n')),(0,r.kt)("h2",{id:"optional-vs-required"},"Optional vs Required"),(0,r.kt)("p",null,"Joist's fields model ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"not null")," appropriately, e.g. for a table like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'                     Table "public.authors"\n    Column    |           Type           | Nullable\n--------------+--------------------------+----------+\n id           | integer                  | not null |\n first_name   | character varying(255)   | not null |\n last_name    | character varying(255)   |          |\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Author")," domain object will type ",(0,r.kt)("inlineCode",{parentName:"p"},"firstName")," as a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"lastName")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"string | undefined"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class AuthorCodegen {\n  get firstName(): string { ... }\n  set firstName(firstName: string) { ... }\n  get lastName(): string | undefined { ... }\n  set lastName(lastName: string | undefined) { ... }\n}\n")),(0,r.kt)("h3",{id:"using-undefined-instead-of-null"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"undefined")," instead of ",(0,r.kt)("inlineCode",{parentName:"h3"},"null")),(0,r.kt)("p",null,"Joist uses ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," to represent nullable columns, i.e. in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Author")," example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"lastName")," type is ",(0,r.kt)("inlineCode",{parentName:"p"},"string | undefined")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null | undefined"),"."),(0,r.kt)("p",null,'The rationale for this is simplicity, and Joist\'s preference for "idiomatic TypeScript", which for the most part has eschewed the "when to use ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," vs. ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),' in JavaScript?" decision by going with "just use ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),'."'),(0,r.kt)("h3",{id:"type-checked-construction"},"Type Checked Construction"),(0,r.kt)("p",null,"The non-null ",(0,r.kt)("inlineCode",{parentName:"p"},"Author.firstName")," field is enforced as required on construction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Valid\nnew Author(em, { firstName: "bob" });\n// Not valid\nnew Author(em, {});\n// Not valid\nnew Author(em, { firstName: null });\n// Not valid\nnew Author(em, { firstName: undefined });\n')),(0,r.kt)("p",null,"And for updates made via the ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Valid\nauthor.set({ firstName: "bob" });\n// Valid, because `set` accepts a Partial\nauthor.set({});\n// Not valid\nauthor.set({ firstName: null });\n// Technically valid b/c `set` accepts a Partial, but is a noop\nauthor.set({ firstName: undefined });\n')),(0,r.kt)("h3",{id:"partial-updates-semantics"},"Partial Updates Semantics"),(0,r.kt)("p",null,"While within internal business logic ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," vs. ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," is not really a useful distinction, when building APIs ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),' can be a useful value to signify "unset" (vs. ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),' which typically signifies "don\'t change").'),(0,r.kt)("p",null,"For this use case, domain objects have a ",(0,r.kt)("inlineCode",{parentName:"p"},".setPartial")," that accepts null versions of properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Partial update from an API operation\nconst updateFromApi = {\n  firstName: null\n};\n// Allowed\nauthor.setPartial(updateFromApi);\n// Outputs "undeifned" b/c null is still translated to undefined\nconsole.log(author.firstName);\n')),(0,r.kt)("p",null,"Note that, when using ",(0,r.kt)("inlineCode",{parentName:"p"},"setPartial")," we have caused our ",(0,r.kt)("inlineCode",{parentName:"p"},"Author.firstName: string")," getter to now be incorrect, i.e. for a currently invalid ",(0,r.kt)("inlineCode",{parentName:"p"},"Author"),", clients might observe ",(0,r.kt)("inlineCode",{parentName:"p"},"firstName")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/querying/partial-update-apis"},"Partial Update APIs")," for more details."),(0,r.kt)("h2",{id:"protected-fields"},"Protected Fields"),(0,r.kt)("p",null,"You can mark a field as protected in ",(0,r.kt)("inlineCode",{parentName:"p"},"joist-codegen.json"),", which will make the setter ",(0,r.kt)("inlineCode",{parentName:"p"},"protected"),", so that only your entity's internal business logic can call it."),(0,r.kt)("p",null,"The getter will still be public."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "entities": {\n    "Author": {\n      "fields": {\n        "wasEverPopular": { "protected": true }\n      }\n    }\n  }\n}\n')))}m.isMDXComponent=!0}}]);