"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[245],{5318:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(7378);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),h=o,f=d["".concat(s,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8167:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var n=r(5773),o=r(808),a=(r(7378),r(5318)),i=["components"],l={title:"Relation Helpers"},s=void 0,u={unversionedId:"features/relation-helpers",id:"features/relation-helpers",isDocsHomePage:!1,title:"Relation Helpers",description:"hasOneThrough",source:"@site/docs/features/relation-helpers.md",sourceDirName:"features",slug:"/features/relation-helpers",permalink:"/joist-ts/docs/features/relation-helpers",editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/features/relation-helpers.md",tags:[],version:"current",frontMatter:{title:"Relation Helpers"},sidebar:"tutorialSidebar",previous:{title:"Protected Fields",permalink:"/joist-ts/docs/features/protected-fields"},next:{title:"Tagged Ids",permalink:"/joist-ts/docs/features/tagged-ids"}},c=[{value:"hasOneThrough",id:"hasonethrough",children:[],level:3},{value:"hasOneDerived",id:"hasonederived",children:[],level:3}],p={toc:c};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"hasonethrough"},"hasOneThrough"),(0,a.kt)("p",null,"You can define common paths through your entity graph with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class BookReview extends BookReviewCodegen {\n  readonly author: Reference<BookReview, Author, never> = hasOneThrough((review) => review.book.author);\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough")," DSL is built on Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomReferences"),", so will also work with ",(0,a.kt)("inlineCode",{parentName:"p"},"populate"),", i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const review = await em.load(BookReview, "1", { author: "publisher" });\nexpect(review.author.get.publisher.get.name).toEqual("p1");\n')),(0,a.kt)("h3",{id:"hasonederived"},"hasOneDerived"),(0,a.kt)("p",null,"You can define a relation that is conditional with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneDerived"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'readonly publisher: Reference<BookReview, Publisher, undefined> = hasOneDerived(\n  { book: { author: "publisher" } },\n  (review) => {\n    // some conditional logic here, but review is loaded\n    return review.book.get.author.get.publisher.get\n  },\n);\n')),(0,a.kt)("p",null,"This works a lot like ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),", but if useful for when you have conditional navigation logic, instead of a fixed navigation path."))}d.isMDXComponent=!0}}]);