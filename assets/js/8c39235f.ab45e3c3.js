"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[488],{5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2604:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=n(5773),a=n(808),r=(n(7378),n(5318)),i=["components"],l={title:"N+1 Safety",sidebar_position:2},c=void 0,s={unversionedId:"goals/dataloader-integration",id:"goals/dataloader-integration",isDocsHomePage:!1,title:"N+1 Safety",description:"Accidentally triggering N+1s is a common pitfall of ORMs, because the ORM's \"pretending to be in memory objects\" mental model can be a leaky abstraction: you can access 1,000 actually-in-memory objects very quickly in a for loop, but you can't access 1,000 not-actually-in-memory objects in a for loop.",source:"@site/docs/goals/dataloader-integration.md",sourceDirName:"goals",slug:"/goals/dataloader-integration",permalink:"/joist-ts/docs/goals/dataloader-integration",editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/goals/dataloader-integration.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"N+1 Safety",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Code Generation",permalink:"/joist-ts/docs/goals/code-generation"},next:{title:"Type-Safe Relations",permalink:"/joist-ts/docs/goals/type-safe-relations"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Accidentally triggering N+1s is a common pitfall of ORMs, because the ORM\'s "pretending to be in memory objects" mental model can be a leaky abstraction: you can access 1,000 actually-in-memory objects very quickly in a ',(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop, but you can't access 1,000 ",(0,r.kt)("em",{parentName:"p"},"not"),"-actually-in-memory objects in a ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop."),(0,r.kt)("p",null,'Somewhat ironically/coincidentally (given the years of callback hell that Node/JS initially had to suffer through), Node/JS\'s single-threaded model is a boon to N+1 prevention because it forces all blocking I/O calls to be "identifiable", i.e. they ',(0,r.kt)("em",{parentName:"p"},"always")," require a callback or a promise."),(0,r.kt)("p",null,"The innovative ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/dataloader"},"DataLoader"),' library provides a convention for "recognizing" multiple blocking calls that happen within a single tick of the event loop, which is where N+1s usually sprout from, and combining them into batch calls.'),(0,r.kt)("p",null,"Joist is built on DataLoader from the ground up, and nearly all SQL operations (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager.load"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager.populate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager.find"),", loading entity references/collections like ",(0,r.kt)("inlineCode",{parentName:"p"},"author.books.load()"),", etc.) are all automatically batched, so N+1s should essentially never happen."))}d.isMDXComponent=!0}}]);