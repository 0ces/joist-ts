"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[375],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5315:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=n(2685),o=n(1244),a=(n(7378),n(5318)),i=["components"],s={title:"Lenses"},l=void 0,p={unversionedId:"features/lenses",id:"features/lenses",title:"Lenses",description:"As covered in type safe relations, Joist provides populate hints to more ergonomically traverse the object graph.",source:"@site/docs/features/lenses.md",sourceDirName:"features",slug:"/features/lenses",permalink:"/docs/features/lenses",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/features/lenses.md",tags:[],version:"current",frontMatter:{title:"Lenses"},sidebar:"tutorialSidebar",previous:{title:"graphql-filters",permalink:"/docs/features/graphql-filters"},next:{title:"Lifecycle Hooks",permalink:"/docs/features/lifecycle-hooks"}},u={},c=[{value:"Explanation",id:"explanation",level:2},{value:"Typing",id:"typing",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As covered in ",(0,a.kt)("a",{parentName:"p",href:"/docs/goals/type-safe-relations"},"type safe relations"),", Joist provides populate hints to more ergonomically traverse the object graph."),(0,a.kt)("p",null,"For example, to get all book reviews for an author:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const author = await em.load(\n  Author,\n  "a:1",\n  { books: "reviews" }\n);\nconst reviews = author.books.get.flatMap((book) => {\n  return book.reviews.get;\n})\nconsole.log(`Found ${reviews.length} reviews`);\n')),(0,a.kt)("p",null,'Another feature that allows similar "more ergonomic traversal" is ',(0,a.kt)("inlineCode",{parentName:"p"},"Entity.load"),", which looks like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const author = await em.load(Author, "a:1");\nconst reviews = await author.load(a => a.books.reviews);\nconsole.log(`Found ${reviews.length} reviews`);\n')),(0,a.kt)("h2",{id:"explanation"},"Explanation"),(0,a.kt)("p",null,"In the above example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"author.load")," method passes its lambda the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),"; this parameter is just a proxy/",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/@dtipson/functional-lenses-d1aba9e52254"},"lens"),' records/"marks" what path to take through the object graph.'),(0,a.kt)("p",null,"Once the lambda returns that path (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"a.books.reviews")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"author -> books -> reviews"),"), then the ",(0,a.kt)("inlineCode",{parentName:"p"},"load"),' method internally loads/follows those paths, and returns the collection of entities that was at the "end" of the path.'),(0,a.kt)("h2",{id:"typing"},"Typing"),(0,a.kt)("p",null,"In the above example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," parameter is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Lens<Author>"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"Lens")," is a mapped type that exposes ",(0,a.kt)("inlineCode",{parentName:"p"},"Author"),"'s relations as simple keys."),(0,a.kt)("p",null,"Those keys themselves return new ",(0,a.kt)("inlineCode",{parentName:"p"},"Lens"),"s, i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"a.books")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Lens<Book, Book[]>")," (the 2nd ",(0,a.kt)("inlineCode",{parentName:"p"},"Book[]")," is because ",(0,a.kt)("inlineCode",{parentName:"p"},"books")," returns multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"Book"),"s)."),(0,a.kt)("p",null,"Then ",(0,a.kt)("inlineCode",{parentName:"p"},".reviews")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Lens<BookReview, BookReview[]>"),', and since it is the "last path" / last lens, that is who the ',(0,a.kt)("inlineCode",{parentName:"p"},"author.load")," method knows that its return type should be ",(0,a.kt)("inlineCode",{parentName:"p"},"BookReview[]"),"."))}m.isMDXComponent=!0}}]);