"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[152],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,m=d["".concat(s,".").concat(g)]||d[g]||p[g]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3846:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2685),i=n(1244),o=(n(7378),n(5318)),a=["components"],l={title:"Installation",slug:"/getting-started",sidebar_position:0},s=void 0,c={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Installation",description:"Firstly, install all the joist packages:",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started",permalink:"/docs/getting-started",editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/getting-started/installation.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Installation",slug:"/getting-started",sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Schema Assumptions",permalink:"/docs/getting-started/schema-assumptions"}},u=[{value:"Workflow",id:"workflow",children:[],level:3},{value:"Creating a migration and migrating",id:"creating-a-migration-and-migrating",children:[{value:"node-pg-migrate",id:"node-pg-migrate",children:[],level:4},{value:"Another migration tool",id:"another-migration-tool",children:[],level:4}],level:3},{value:"Run Joist codegen",id:"run-joist-codegen",children:[],level:3},{value:"Use the entities in your production code",id:"use-the-entities-in-your-production-code",children:[],level:3}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Firstly, install all the joist packages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add joist-orm knex joist-utils joist-codegen\n")),(0,o.kt)("h3",{id:"workflow"},"Workflow"),(0,o.kt)("p",null,"Joist works by generating all the necessary entities and configs by reading your database schema. Below is the workflow for making changes to your entities:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a migration with your library of choice. Joist ships with it's own migration wrapper"),(0,o.kt)("li",{parentName:"ol"},"Migrate your changes"),(0,o.kt)("li",{parentName:"ol"},"Run Joist codegen"),(0,o.kt)("li",{parentName:"ol"},"Use the entities in your production code")),(0,o.kt)("p",null,"You can also verify your database schema matches ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started/schema-assumptions"},"Joist's schema assumptions"),"."),(0,o.kt)("h3",{id:"creating-a-migration-and-migrating"},"Creating a migration and migrating"),(0,o.kt)("h4",{id:"node-pg-migrate"},"node-pg-migrate"),(0,o.kt)("p",null,"If you do use ",(0,o.kt)("inlineCode",{parentName:"p"},"node-pg-migrate"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"joist-migration-utils")," package has some helper methods + glue code to invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"node-pg-migrate")," with the same ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn ts-node ./node_modules/joist-migration-utils/build/index.js\n")),(0,o.kt)("p",null,"This will apply any ",(0,o.kt)("inlineCode",{parentName:"p"},"node-pg-migrate")," migrations located in your ",(0,o.kt)("inlineCode",{parentName:"p"},"./migrations/")," directory."),(0,o.kt)("p",null,"Note that usually ",(0,o.kt)("inlineCode",{parentName:"p"},"joist-migration-utils")," / your migration library of choice is run first, i.e. a flow would be:"),(0,o.kt)("h4",{id:"another-migration-tool"},"Another migration tool"),(0,o.kt)("p",null,"Joist is agnostic to your migration tool and will codegen based on your database schema. You're welcome to use Knex or another tool for migrations."),(0,o.kt)("p",null,"For Knex (which Joist uses under the hood), run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"knex migrate:make migration_name\n")),(0,o.kt)("h3",{id:"run-joist-codegen"},"Run Joist codegen"),(0,o.kt)("p",null,"Define your local postgres creds in a ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable, i.e. in an ",(0,o.kt)("inlineCode",{parentName:"p"},"local.env")," file similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"DATABASE_URL=postgres://joist:local@localhost:5435/joist\n")),(0,o.kt)("p",null,"With this env variable set, run the ",(0,o.kt)("inlineCode",{parentName:"p"},"joist-codegen")," module, i.e. with ",(0,o.kt)("inlineCode",{parentName:"p"},"env")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn ts-node ./node_modules/joist-codegen/build/index.js\n")),(0,o.kt)("p",null,"This will generate all the required files"),(0,o.kt)("h3",{id:"use-the-entities-in-your-production-code"},"Use the entities in your production code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { EntityManager, Author } from './entities';\nimport { newPgConnectionConfig, PostgresDriver } from 'joist-orm';\nimport { knex as createKnex, Knex } from 'knex';\n\nlet knex: Knex;\n\nfunction getKnex(): Knex {\n  return createKnex({\n    client: 'pg',\n    connection: newPgConnectionConfig() as any,\n    debug: false,\n    asyncStackTraces: true,\n  });\n}\n\nfunction newEntityManager(): EntityManager {\n  return new EntityManager({}, new PostgresDriver(getKnex()));\n}\n\nconst em = newEntityManager();\n\n\napp.get('/authors', async (req, res) => {\n  const authors = await em.find(\n    Author,\n    {},\n  );\n\n  res.send(authors);\n});\n")))}d.isMDXComponent=!0}}]);