"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[387],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8878:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=n(2685),a=n(1244),i=(n(7378),n(5318)),o=["components"],l={title:"Validation Rules"},u=void 0,s={unversionedId:"modeling/validation-rules",id:"modeling/validation-rules",title:"Validation Rules",description:"Entities can have validation rules added that will be run during EntityManager.flush():",source:"@site/docs/modeling/validation-rules.md",sourceDirName:"modeling",slug:"/modeling/validation-rules",permalink:"/docs/modeling/validation-rules",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/modeling/validation-rules.md",tags:[],version:"current",frontMatter:{title:"Validation Rules"},sidebar:"tutorialSidebar",previous:{title:"Lifecycle Hooks",permalink:"/docs/modeling/lifecycle-hooks"},next:{title:"Finders",permalink:"/docs/querying/finders"}},c={},d=[{value:"Built-in Rules",id:"built-in-rules",level:2},{value:"Required",id:"required",level:3},{value:"Cannot Be Updated",id:"cannot-be-updated",level:3}],p={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Entities can have validation rules added that will be run during ",(0,i.kt)("inlineCode",{parentName:"p"},"EntityManager.flush()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { authorConfig as config } from "./entities"\n\nclass Author extends AuthorCodegen {\n  constructor(em: EntityManager, opts: AuthorOpts) {\n    super(em, opts);\n  }\n}\n\nconfig.addRule((author) => {\n  if (author.firstName && author.firstName === author.lastName) {\n    return "firstName and lastName must be different";\n  }\n});\n\n// Rules can be async\nconfig.addRule(async (author) => {\n  const books = await authorthis.books.load();\n  // ...\n});\n')),(0,i.kt)("p",null,"If any validation rule returns a non-",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," string, ",(0,i.kt)("inlineCode",{parentName:"p"},"flush()")," will throw a ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidationErrors")," error."),(0,i.kt)("p",null,"If you would like to skip validation rules, you can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"skipValidation: true")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"flush()"),". Use this technique with caution, as it can create invalid entities."),(0,i.kt)("h2",{id:"built-in-rules"},"Built-in Rules"),(0,i.kt)("h3",{id:"required"},"Required"),(0,i.kt)("p",null,"Joist automatically adds required rules to any column with a not null constraint."),(0,i.kt)("h3",{id:"cannot-be-updated"},"Cannot Be Updated"),(0,i.kt)("p",null,"If a field can only be set on create (i.e. a parent), you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"cannotBeUpdated"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// Don\'t let the parent change\nconfig.addRule(cannotBeUpdated("parent"));\n')),(0,i.kt)("p",null,"Also, you can make this conditional, i.e. on a status:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// Only allow updating cost while draft\nconfig.addRule(cannotBeUpdated("cost", e => e.isDraft));\n')))}f.isMDXComponent=!0}}]);