"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[790],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(2685),r=(n(7378),n(5318));const o={title:"Finders",sidebar_position:1},i=void 0,l={unversionedId:"querying/finders",id:"querying/finders",title:"Finders",description:"Joist's EntityManager has several methods for easily finding/loading entities.",source:"@site/docs/querying/finders.md",sourceDirName:"querying",slug:"/querying/finders",permalink:"/docs/querying/finders",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/querying/finders.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Finders",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"JSONB Fields",permalink:"/docs/modeling/jsonb-fields"},next:{title:"Create/Update/Delete",permalink:"/docs/querying/create-update-delete"}},s={},d=[{value:"<code>#load</code>",id:"load",level:3},{value:"<code>#loadAll</code>",id:"loadall",level:3},{value:"<code>#loadAllIfExists</code>",id:"loadallifexists",level:3},{value:"<code>#loadFromQuery</code>",id:"loadfromquery",level:3},{value:"<code>#find</code>",id:"find",level:3},{value:"<code>#findOne</code>",id:"findone",level:3},{value:"<code>#findOneOrFail</code>",id:"findoneorfail",level:3},{value:"<code>#findOrCreate</code>",id:"findorcreate",level:3}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Joist's ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager")," has several methods for easily finding/loading entities."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As a disclaimer, Joist does not yet have a full-blown query builder API that can support arbitrary SQL. It's primary focus is providing a robust framework to your implement core domain model (validation rules, hooks, and core one-to-many, many-to-one, etc. relations), and defers complex querying to a dedicated query library."),(0,r.kt)("p",{parentName:"admonition"},"That said, ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager")," has several methods (",(0,r.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"findAll"),", etc., documented below) that support common cases of finding entities by simple conditions and many-to-one joins, but for anything more complicated (one-to-many joins, many-to-many joins, or aggregates), for now the best practice is to use a dedicated query builder like Knex."),(0,r.kt)("p",{parentName:"admonition"},"Currently, we suggest using Knex, because it's what Joist also uses internally.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Since these docs are still work-in-progress, you can also scan the unit tests in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/stephenh/joist-ts/blob/main/packages/integration-tests/src/EntityManager.test.ts"},"Joist repo")," for examples of queries.")),(0,r.kt)("h3",{id:"load"},(0,r.kt)("inlineCode",{parentName:"h3"},"#load")),(0,r.kt)("p",null,"Load an instance of a given entity and id."),(0,r.kt)("p",null,"This will return the existing ",(0,r.kt)("inlineCode",{parentName:"p"},"Author:1")," instance if it's already been loaded from the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst a = await em.load(Author, "a:1");\n')),(0,r.kt)("h3",{id:"loadall"},(0,r.kt)("inlineCode",{parentName:"h3"},"#loadAll")),(0,r.kt)("p",null,"Load multiple instances of a given entity and ids, and fails if any id does not exist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst a = await em.loadAll(Author, ["a:1", "a:2"]);\n')),(0,r.kt)("h3",{id:"loadallifexists"},(0,r.kt)("inlineCode",{parentName:"h3"},"#loadAllIfExists")),(0,r.kt)("p",null,"Load multiple instances of a given entity and ids, and ignores ids that don't exist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst a = await em.loadAllIfExists(Author, ["a:1", "a:2"]);\n')),(0,r.kt)("h3",{id:"loadfromquery"},(0,r.kt)("inlineCode",{parentName:"h3"},"#loadFromQuery")),(0,r.kt)("p",null,"Load multiple instances of a given entity from a Knex QueryBuilder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst authors = await em.loadFromQuery(Author, knex.select("*").from("authors"));\n')),(0,r.kt)("h3",{id:"find"},(0,r.kt)("inlineCode",{parentName:"h3"},"#find")),(0,r.kt)("p",null,"Query an entity and given where clause"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst authors = await em.find(Author, { email: "foo@bar.com" });\n')),(0,r.kt)("p",null,"You can also query based on an association"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const books = await em.find(Book, { author: { firstName: "a2" } });\n')),(0,r.kt)("h3",{id:"findone"},(0,r.kt)("inlineCode",{parentName:"h3"},"#findOne")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const em = newEntityManager();\nconst author = await em.findOne(Author, { email: 'foo@bar.com\" });\n")),(0,r.kt)("h3",{id:"findoneorfail"},(0,r.kt)("inlineCode",{parentName:"h3"},"#findOneOrFail")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst author = await em.findOneOrFail(Author, { email: "foo@bar.com" });\n')),(0,r.kt)("h3",{id:"findorcreate"},(0,r.kt)("inlineCode",{parentName:"h3"},"#findOrCreate")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst author = await em.findOrCreate(Author, { email: "foo@bar.com" });\n')))}u.isMDXComponent=!0}}]);