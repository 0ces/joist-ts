"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[265],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,c=h["".concat(s,".").concat(m)]||h[m]||u[m]||i;return n?o.createElement(c,l(l({ref:t},d),{},{components:n})):o.createElement(c,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var o=n(2685),a=(n(7378),n(5318));const i={title:"Relations",sidebar_position:2},l=void 0,r={unversionedId:"modeling/relations",id:"modeling/relations",title:"Relations",description:"Relations are relationships between entities in your domain model, for example an Author's list of Books or an Author's current Publisher.",source:"@site/docs/modeling/relations.md",sourceDirName:"modeling",slug:"/modeling/relations",permalink:"/docs/modeling/relations",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/modeling/relations.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Relations",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Fields",permalink:"/docs/modeling/fields"},next:{title:"Validation Rules",permalink:"/docs/modeling/validation-rules"}},s={},p=[{value:"Many To One References",id:"many-to-one-references",level:2},{value:"Optional vs. Required",id:"optional-vs-required",level:3},{value:"Loading",id:"loading",level:3},{value:"One To Many Collections",id:"one-to-many-collections",level:2},{value:"Loading",id:"loading-1",level:3},{value:"Polymorphic References",id:"polymorphic-references",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Usage",id:"usage",level:3},{value:"In Sync Relations",id:"in-sync-relations",level:2},{value:"Custom Relations",id:"custom-relations",level:2},{value:"hasOneThrough",id:"hasonethrough",level:3},{value:"hasManyThrough",id:"hasmanythrough",level:3},{value:"hasOneDerived",id:"hasonederived",level:3}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Relations are relationships between entities in your domain model, for example an ",(0,a.kt)("inlineCode",{parentName:"p"},"Author"),"'s list of ",(0,a.kt)("inlineCode",{parentName:"p"},"Book"),"s or an ",(0,a.kt)("inlineCode",{parentName:"p"},"Author"),"'s current ",(0,a.kt)("inlineCode",{parentName:"p"},"Publisher"),". "),(0,a.kt)("p",null,"Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-codegen")," step automatically discovers the relations from your database schema (based on foreign keys) and generates either ",(0,a.kt)("inlineCode",{parentName:"p"},"Reference"),"s (for relations that point to a single other entity) or ",(0,a.kt)("inlineCode",{parentName:"p"},"Collection"),"s (for relations that point to multiple other entities)."),(0,a.kt)("p",null,"Two common themes for all of Joist's relations are that:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"They are by default unloaded, and require ",(0,a.kt)("inlineCode",{parentName:"p"},"await author.book.load()")," calls to load, ",(0,a.kt)("em",{parentName:"p"},"but")," also all support preloading via populate hints, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/goals/type-safe-relations"},"type safe relations")," for more.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'Joist always keeps "both sides" of relationships in sync, for example if you add a ',(0,a.kt)("inlineCode",{parentName:"p"},"Book")," to an ",(0,a.kt)("inlineCode",{parentName:"p"},"Author"),", that ",(0,a.kt)("inlineCode",{parentName:"p"},"Author"),"'s list of books will automatically include that ",(0,a.kt)("inlineCode",{parentName:"p"},"Book"),"."),(0,a.kt)("p",{parentName:"li"},"This is a big quality-of-life win, as business logic (validation rules, rendering logic) will always see the latest state of relations, and not have to worry about running against now-stale data."))),(0,a.kt)("h2",{id:"many-to-one-references"},"Many To One References"),(0,a.kt)("p",null,"Joist looks for ",(0,a.kt)("inlineCode",{parentName:"p"},"m2o"),' "outgoing" foreign keys like ',(0,a.kt)("inlineCode",{parentName:"p"},"books.author_id")," pointing to ",(0,a.kt)("inlineCode",{parentName:"p"},"books.id")," and automatically includes a ",(0,a.kt)("inlineCode",{parentName:"p"},"ManyToOneReference")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"BookCodegen")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export abstract class BookCodegen {\n  readonly author: ManyToOneReference<Book, Author, never> = hasOne(authorMeta, "author", "books");\n}\n')),(0,a.kt)("h3",{id:"optional-vs-required"},"Optional vs. Required"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"books.author_id")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"not null"),", then the reference will be required, i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"someBook.author.get")," will return ",(0,a.kt)("inlineCode",{parentName:"p"},"Author"),", otherwise it will be optional, and ",(0,a.kt)("inlineCode",{parentName:"p"},"someBook.author.get")," will return ",(0,a.kt)("inlineCode",{parentName:"p"},"Author | undefined"),"."),(0,a.kt)("h3",{id:"loading"},"Loading"),(0,a.kt)("p",null,"Accessing the ",(0,a.kt)("inlineCode",{parentName:"p"},"Author")," entity from a ",(0,a.kt)("inlineCode",{parentName:"p"},"Book")," requires either calling ",(0,a.kt)("inlineCode",{parentName:"p"},".load()")," or a populate hint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Unloaded\nconst b1 = await em.load(Book, "b:1");\nconst a1 = await b1.author.load();\nconsole.log(a1.firstName);\n\n// Preloaded\nconst b2 = await em.load(Book, "b:2", "author");\nconsole.log(b2.author.get.firstName);\n')),(0,a.kt)("h2",{id:"one-to-many-collections"},"One To Many Collections"),(0,a.kt)("p",null,'Joist looks for "incoming" ',(0,a.kt)("inlineCode",{parentName:"p"},"m2o")," foreign keys like ",(0,a.kt)("inlineCode",{parentName:"p"},"books.author_id")," pointing to ",(0,a.kt)("inlineCode",{parentName:"p"},"author.id")," and automatically generates a ",(0,a.kt)("inlineCode",{parentName:"p"},"hasMany"),' collection on the "other side" in ',(0,a.kt)("inlineCode",{parentName:"p"},"AuthorCodegen.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export abstract class AuthorCodegen {\n  readonly books: Collection<Author, Book> = hasMany(bookMeta, "books", "author", "author_id");\n}\n')),(0,a.kt)("h3",{id:"loading-1"},"Loading"),(0,a.kt)("p",null,"When unloaded, ",(0,a.kt)("inlineCode",{parentName:"p"},"Collection"),"s only support adding and removing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const a = await em.load(Author, "a:1");\na.books.add(someBook);\na.books.remove(otherBook);\n')),(0,a.kt)("p",null,"To access the collection, it must have ",(0,a.kt)("inlineCode",{parentName:"p"},".load()")," called or be loaded with a populate hint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Unloaded\nconst a1 = await em.load(Author, "a:1");\nconst books = await a1.books.load();\nconsole.log(books.length);\n\n// Preloaded\nconst a2 = await em.load(Author, "a:2", "books");\nconsole.log(a2.books.get.length);\nconsole.log(a2.books.get[0].title);\n')),(0,a.kt)("h2",{id:"polymorphic-references"},"Polymorphic References"),(0,a.kt)("p",null,"Polymorphic references model an entity (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"Book"),") that has a single logical field that can be set to multiple (i.e. poly) ",(0,a.kt)("em",{parentName:"p"},"types")," of other entities, but ",(0,a.kt)("em",{parentName:"p"},"only one such entity at a time")," (i.e. a reference b/c it points to only one other entity)."),(0,a.kt)("p",null,"For example maybe a ",(0,a.kt)("inlineCode",{parentName:"p"},"Book")," has a single logical ",(0,a.kt)("inlineCode",{parentName:"p"},"publisher")," field that can either be a ",(0,a.kt)("inlineCode",{parentName:"p"},"CorporatePublisher")," entity (a row in the ",(0,a.kt)("inlineCode",{parentName:"p"},"corporate_publishers")," table) or a ",(0,a.kt)("inlineCode",{parentName:"p"},"SelfPublisher")," entity (a row in the ",(0,a.kt)("inlineCode",{parentName:"p"},"self_publishers")," table)."),(0,a.kt)("p",null,"The simplest way to model this ",(0,a.kt)("inlineCode",{parentName:"p"},"Book")," scenario would be having two foreign keys, a ",(0,a.kt)("inlineCode",{parentName:"p"},"books.corporate_publisher_id")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"books.self_publisher_id"),', and then having your application\'s business logic "just know" that it should enforce only one of these keys being set at a single time.'),(0,a.kt)("p",null,'Polymorphic references allow you to tell Joist about this "single logical field that could be two-or-more different types", and it will do the "can only be set at once" handling for you.'),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"Polymorphic references have two components:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the domain model, they are a single logical field (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"Book.publisher"),")."),(0,a.kt)("p",{parentName:"li"},"The field type is ",(0,a.kt)("inlineCode",{parentName:"p"},"PolymorphicReference<BookPublisher>"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"BookPublisher")," is a code generated type union of each potential type, i.e. Joist will create:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"}," export type BookPublisher = CorporatePublisher | SelfPublisher;\n")),(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"BookCodegen.ts")," file.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'In the database schema, they are multiple physical columns, one per "other" entity type (i.e. ',(0,a.kt)("inlineCode",{parentName:"p"},"books.publisher_corporate_publisher_id")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"books.publisher_self_publisher_id"),")"))),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("p",null,"To use polymorphic references, there are two steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create the multiple physical foreign keys in your schema, all with a similar ",(0,a.kt)("inlineCode",{parentName:"p"},"publisher_*_id")," naming convention.  ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-config.json"),", add a new ",(0,a.kt)("inlineCode",{parentName:"p"},"publisher")," relation that is marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"polymorphic"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "entites": {\n     "Comment": {\n        "relations": { "publisher": { "polymorphic": "notNull" } },\n        "tag": "comment"\n     }\n  }\n}\n')),(0,a.kt)("p",{parentName:"li"},"Joist with then use the ",(0,a.kt)("inlineCode",{parentName:"p"},"publisher")," name to scan for any other ",(0,a.kt)("inlineCode",{parentName:"p"},"publisher_"),"-prefixed foreign keys and automatically pull them in as components of this polymorphic reference."))),(0,a.kt)("h2",{id:"in-sync-relations"},"In Sync Relations"),(0,a.kt)("p",null,"Joist keeps both sides of m2o/o2m/o2o relationships in sync, i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Load the author with the books collection loaded\nconst a = await em.load(Author, "a:1", "books");\n// Load a book, and set the author\nconst b = await em.load(Book, "b:1");\nb.author.set(a);\n// This will print true\nconsole.log(a.books.get.includes(b));\n')),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"Author.books")," collection is not loaded yet, then the ",(0,a.kt)("inlineCode",{parentName:"p"},"b.author.set"),' line does not cause it to become loaded, but instead will remember "add ',(0,a.kt)("inlineCode",{parentName:"p"},"b"),'" as a pending operation, to apply to ',(0,a.kt)("inlineCode",{parentName:"p"},"a.books"),", should it later become loaded within the current ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityManager"),"."),(0,a.kt)("h2",{id:"custom-relations"},"Custom Relations"),(0,a.kt)("p",null,"Besides the core relations discovered from the schema's foreign keys, Joist lets you declare additional relations in your domain model."),(0,a.kt)("h3",{id:"hasonethrough"},"hasOneThrough"),(0,a.kt)("p",null,"You can define common paths through your entity graph with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class BookReview extends BookReviewCodegen {\n  readonly author: Reference<BookReview, Author, never> = hasOneThrough((review) => review.book.author);\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough")," DSL is built on Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomReferences"),", so will also work with ",(0,a.kt)("inlineCode",{parentName:"p"},"populate"),", i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const review = await em.load(BookReview, "1", { author: "publisher" });\nexpect(review.author.get.publisher.get.name).toEqual("p1");\n')),(0,a.kt)("h3",{id:"hasmanythrough"},"hasManyThrough"),(0,a.kt)("p",null,"You can define common paths through your entity graph with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class BookReview extends BookReviewCodegen {\n  readonly author: Reference<BookReview, Author, never> = hasOneThrough((review) => review.book.author);\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough")," DSL is built on Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomReferences"),", so will also work with ",(0,a.kt)("inlineCode",{parentName:"p"},"populate"),", i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const review = await em.load(BookReview, "1", { author: "publisher" });\nexpect(review.author.get.publisher.get.name).toEqual("p1");\n')),(0,a.kt)("h3",{id:"hasonederived"},"hasOneDerived"),(0,a.kt)("p",null,"You can define a relation that is conditional with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneDerived"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'class BookReview extends BookReviewCodegen {\n  readonly publisher: Reference<BookReview, Publisher, undefined> = hasOneDerived(\n    {book: {author: "publisher"}},\n    (review) => {\n      // some conditional logic here, but review is loaded\n      return review.book.get.author.get.publisher.get\n    },\n  );\n}\n')),(0,a.kt)("p",null,"This works a lot like ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),", but if useful for when you have conditional navigation logic, instead of a fixed navigation path."))}u.isMDXComponent=!0}}]);