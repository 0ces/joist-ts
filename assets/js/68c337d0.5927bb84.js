"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[749],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9106:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(5773),a=n(808),o=(n(7378),n(5318)),i=["components"],l={title:"Automatic Null Conversion",sidebar_position:3},s=void 0,u={unversionedId:"features/automatic-null-conversion",id:"features/automatic-null-conversion",isDocsHomePage:!1,title:"Automatic Null Conversion",description:"Joist prefers to use undefined where ever possible, i.e. columns that are null in the database are returned as undefined.",source:"@site/docs/features/automatic-null-conversion.md",sourceDirName:"features",slug:"/features/automatic-null-conversion",permalink:"/docs/features/automatic-null-conversion",editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/features/automatic-null-conversion.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Automatic Null Conversion",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Fast Database Resets",permalink:"/docs/features/fast-database-resets"},next:{title:"Changed Fields",permalink:"/docs/features/changed-fields"}},c=[],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Joist prefers to use ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," where ever possible, i.e. columns that are ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," in the database are returned as ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Given `authors` row id=1 has last_name=null\nconst author = em.load(Author, "1");\n// Then the domain object treats it as `undefined`\nexpect(author.lastName).toBeUndefined();\n')),(0,o.kt)("p",null,"And the ",(0,o.kt)("inlineCode",{parentName:"p"},"setPartial")," method allows setting ",(0,o.kt)("inlineCode",{parentName:"p"},"lastName")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const newLastName: string | undefined | null = null;\nauthor.setPartial({ lastName: newLastName });\n// `lastName` is converted to `undefined`\nexpect(author.lastName).toBeUndefined();\n")),(0,o.kt)("p",null,"And when saved to the database, ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"s are converted back into ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"s."),(0,o.kt)("p",null,"(Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"author.lastName")," setter does not accept ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," because in TypeScript the types of getters and setters must be exactly the same, and so Joist can't \"allow setting ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),'" while "enforcing ',(0,o.kt)("inlineCode",{parentName:"p"},"null"),' will not be returned". Helper methods like ',(0,o.kt)("inlineCode",{parentName:"p"},"Entity.set")," do not have this restriction, and so can accept ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"s and do the ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," conversion for callers.)"))}d.isMDXComponent=!0}}]);