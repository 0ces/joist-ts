"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[673],{5318:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=i,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return t?a.createElement(f,l(l({ref:n},p),{},{components:t})):a.createElement(f,l({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7427:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var a=t(2685),i=t(1244),r=(t(7378),t(5318)),l=["components"],o={title:"Nullable Columns",sidebar_position:1},s=void 0,u={unversionedId:"modeling/nullable-columns",id:"modeling/nullable-columns",title:"Nullable Columns",description:"Joist's domain objects automatically model null and not null columns appropriately.",source:"@site/docs/modeling/nullable-columns.md",sourceDirName:"modeling",slug:"/modeling/nullable-columns",permalink:"/docs/modeling/nullable-columns",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/modeling/nullable-columns.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Nullable Columns",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Great Tests",permalink:"/docs/goals/great-tests"},next:{title:"Enum Tables",permalink:"/docs/modeling/enum-tables"}},p={},d=[{value:"Using <code>undefined</code> instead of <code>null</code>",id:"using-undefined-instead-of-null",level:3},{value:"Type Checked Construction",id:"type-checked-construction",level:3},{value:"Partial Updates Semantics",id:"partial-updates-semantics",level:3}],c={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Joist's domain objects automatically model ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"not null")," columns appropriately."),(0,r.kt)("p",null,"I.e. for a table like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'                     Table "public.authors"\n    Column    |           Type           | Nullable\n--------------+--------------------------+----------+\n id           | integer                  | not null |\n first_name   | character varying(255)   | not null |\n last_name    | character varying(255)   |          |\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Author")," domain object will type ",(0,r.kt)("inlineCode",{parentName:"p"},"firstName")," as a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"lastName")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"string | undefined"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class AuthorCodegen {\n  get firstName(): string { ... }\n  set firstName(firstName: string) { ... }\n  get lastName(): string | undefined { ... }\n  set lastName(lastName: string | undefined) { ... }\n}\n")),(0,r.kt)("h3",{id:"using-undefined-instead-of-null"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"undefined")," instead of ",(0,r.kt)("inlineCode",{parentName:"h3"},"null")),(0,r.kt)("p",null,"Joist uses ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," to represent nullable columns, i.e. in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Author")," example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"lastName")," type is ",(0,r.kt)("inlineCode",{parentName:"p"},"string | undefined")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"string | null | undefined"),"."),(0,r.kt)("p",null,'The rationale for this is simplicity, and Joist\'s preference for "idiomatic TypeScript", which for the most part has eschewed the "when to use ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," vs. ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),' in JavaScript?" decision by going with "just use ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),'."'),(0,r.kt)("h3",{id:"type-checked-construction"},"Type Checked Construction"),(0,r.kt)("p",null,"The non-null ",(0,r.kt)("inlineCode",{parentName:"p"},"Author.firstName")," field is enforced as required on construction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Valid\nnew Author(em, { firstName: "bob" });\n// Not valid\nnew Author(em, {});\n// Not valid\nnew Author(em, { firstName: null });\n// Not valid\nnew Author(em, { firstName: undefined });\n')),(0,r.kt)("p",null,"And for updates made via the ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Valid\nauthor.set({ firstName: "bob" });\n// Valid, because `set` accepts a Partial\nauthor.set({});\n// Not valid\nauthor.set({ firstName: null });\n// Technically valid b/c `set` accepts a Partial, but is a noop\nauthor.set({ firstName: undefined });\n')),(0,r.kt)("h3",{id:"partial-updates-semantics"},"Partial Updates Semantics"),(0,r.kt)("p",null,"While within internal business logic ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," vs. ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," is not really a useful distinction, when building APIs ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),' can be a useful value to signify "unset" (vs. ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),' which typically signifies "don\'t change").'),(0,r.kt)("p",null,"For this use case, domain objects have a ",(0,r.kt)("inlineCode",{parentName:"p"},".setPartial")," that accepts null versions of properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Partial update from an API operation\nconst updateFromApi = {\n  firstName: null\n};\n// Allowed\nauthor.setPartial(updateFromApi);\n// Outputs "undeifned" b/c null is still translated to undefined\nconsole.log(author.firstName);\n')),(0,r.kt)("p",null,"Note that, when using ",(0,r.kt)("inlineCode",{parentName:"p"},"setPartial")," we have caused our ",(0,r.kt)("inlineCode",{parentName:"p"},"Author.firstName: string")," getter to now be incorrect, i.e. for a currently invalid ",(0,r.kt)("inlineCode",{parentName:"p"},"Author"),", clients might observe ",(0,r.kt)("inlineCode",{parentName:"p"},"firstName")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/querying/partial-update-apis"},"Partial Update APIs")," for more details."))}m.isMDXComponent=!0}}]);