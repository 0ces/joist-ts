"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[925],{5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,b=d["".concat(l,".").concat(f)]||d[f]||u[f]||s;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},313:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var a=n(2685),r=n(1244),s=(n(7378),n(5318)),o=["components"],i={title:"Fast Database Resets",sidebar_position:1},l=void 0,c={unversionedId:"testing/fast-database-resets",id:"testing/fast-database-resets",title:"Fast Database Resets",description:"To reset the database between each unit test, Joist generates a flush_database stored procedure that will delete all rows/reset the sequence ids:",source:"@site/docs/testing/fast-database-resets.md",sourceDirName:"testing",slug:"/testing/fast-database-resets",permalink:"/docs/testing/fast-database-resets",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/testing/fast-database-resets.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Fast Database Resets",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Optimistic Locking",permalink:"/docs/features/optimistic-locking"},next:{title:"Test Factories",permalink:"/docs/testing/test-factories"}},p={},u=[{value:"What About Per-Test Transactions?",id:"what-about-per-test-transactions",level:3}],d={toc:u};function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"To reset the database between each unit test, Joist generates a ",(0,s.kt)("inlineCode",{parentName:"p"},"flush_database")," stored procedure that will delete all rows/reset the sequence ids:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'await knex.select(knex.raw("flush_database()"));\n')),(0,s.kt)("p",null,"This is generated at the end of the ",(0,s.kt)("inlineCode",{parentName:"p"},"joist-codegen"),", which should only be invoked against local development databases, i.e. this function should never exist in your production database. It is only for local testing."),(0,s.kt)("h3",{id:"what-about-per-test-transactions"},"What About Per-Test Transactions?"),(0,s.kt)("p",null,"As an alternative to Joist's ",(0,s.kt)("inlineCode",{parentName:"p"},"flush_database")," approach, some ORMs invoke tests in a transaction, and then rollback the transaction before the next test (i.e. Rails does this)."),(0,s.kt)("p",null,"However, this has a few downsides:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Debugging failed tests is more difficult b/c the data you want to investigate via ",(0,s.kt)("inlineCode",{parentName:"li"},"psql")," has disappeared/been rolled back, and"),(0,s.kt)("li",{parentName:"ol"},"Your tests cannot test any behavior that uses transactions.")),(0,s.kt)("p",null,"For this reasons, Joist prefers the ",(0,s.kt)("inlineCode",{parentName:"p"},"flush_database")," approach, however you could still use the transaction-per-test approach by putting ",(0,s.kt)("inlineCode",{parentName:"p"},"BEGIN")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ROLLBACK")," commands in your project's ",(0,s.kt)("inlineCode",{parentName:"p"},"beforeEach"),"/",(0,s.kt)("inlineCode",{parentName:"p"},"afterEach"),"."))}f.isMDXComponent=!0}}]);