"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[787],{5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=u(n),d=o,m=h["".concat(s,".").concat(d)]||h[d]||c[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9586:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return h}});var r=n(2685),o=n(1244),a=(n(7378),n(5318)),i=["components"],l={title:"Relation Helpers"},s=void 0,u={unversionedId:"associations/relation-helpers",id:"associations/relation-helpers",title:"Relation Helpers",description:"hasOneThrough",source:"@site/docs/associations/relation-helpers.md",sourceDirName:"associations",slug:"/associations/relation-helpers",permalink:"/docs/associations/relation-helpers",editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/associations/relation-helpers.md",tags:[],version:"current",frontMatter:{title:"Relation Helpers"},sidebar:"tutorialSidebar",previous:{title:"Lenses",permalink:"/docs/associations/lenses"},next:{title:"Tagged Ids",permalink:"/docs/features/tagged-ids"}},p=[{value:"hasOneThrough",id:"hasonethrough",children:[],level:3},{value:"hasManyThrough",id:"hasmanythrough",children:[],level:3},{value:"hasOneDerived",id:"hasonederived",children:[],level:3}],c={toc:p};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"hasonethrough"},"hasOneThrough"),(0,a.kt)("p",null,"You can define common paths through your entity graph with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class BookReview extends BookReviewCodegen {\n  readonly author: Reference<BookReview, Author, never> = hasOneThrough((review) => review.book.author);\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough")," DSL is built on Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomReferences"),", so will also work with ",(0,a.kt)("inlineCode",{parentName:"p"},"populate"),", i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const review = await em.load(BookReview, "1", { author: "publisher" });\nexpect(review.author.get.publisher.get.name).toEqual("p1");\n')),(0,a.kt)("h3",{id:"hasmanythrough"},"hasManyThrough"),(0,a.kt)("p",null,"You can define common paths through your entity graph with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class BookReview extends BookReviewCodegen {\n  readonly author: Reference<BookReview, Author, never> = hasOneThrough((review) => review.book.author);\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough")," DSL is built on Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomReferences"),", so will also work with ",(0,a.kt)("inlineCode",{parentName:"p"},"populate"),", i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const review = await em.load(BookReview, "1", { author: "publisher" });\nexpect(review.author.get.publisher.get.name).toEqual("p1");\n')),(0,a.kt)("h3",{id:"hasonederived"},"hasOneDerived"),(0,a.kt)("p",null,"You can define a relation that is conditional with ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneDerived"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'readonly publisher: Reference<BookReview, Publisher, undefined> = hasOneDerived(\n  { book: { author: "publisher" } },\n  (review) => {\n    // some conditional logic here, but review is loaded\n    return review.book.get.author.get.publisher.get\n  },\n);\n')),(0,a.kt)("p",null,"This works a lot like ",(0,a.kt)("inlineCode",{parentName:"p"},"hasOneThrough"),", but if useful for when you have conditional navigation logic, instead of a fixed navigation path."))}h.isMDXComponent=!0}}]);