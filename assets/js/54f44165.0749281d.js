"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[152],{5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=i,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||a;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3846:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(2685),i=n(1244),a=(n(7378),n(5318)),o=["components"],s={title:"Installation",slug:"/getting-started",sidebar_position:0},l=void 0,c={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Installation",description:"First, install Joist's packages:",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/getting-started/installation.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Installation",slug:"/getting-started",sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Schema Assumptions",permalink:"/docs/getting-started/schema-assumptions"}},p={},d=[{value:"Workflow",id:"workflow",level:3},{value:"Creating a migration and migrating",id:"creating-a-migration-and-migrating",level:3},{value:"node-pg-migrate",id:"node-pg-migrate",level:4},{value:"Run Joist codegen",id:"run-joist-codegen",level:3},{value:"Use the entities in your production code",id:"use-the-entities-in-your-production-code",level:3}],u={toc:d};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"First, install Joist's packages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm add --save joist-orm knex joist-utils\nnpm add --save-dev joist-codegen\n")),(0,a.kt)("h3",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,"Joist works by generating all the necessary entities by reading your database schema. Below is the workflow for making changes to your entities:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a migration with your library of choice"),(0,a.kt)("li",{parentName:"ol"},"Migrate your changes"),(0,a.kt)("li",{parentName:"ol"},"Run Joist codegen"),(0,a.kt)("li",{parentName:"ol"},"Use the entities in your production code")),(0,a.kt)("p",null,"You can also verify your database schema matches ",(0,a.kt)("a",{parentName:"p",href:"/docs/getting-started/schema-assumptions"},"Joist's schema assumptions"),"."),(0,a.kt)("h3",{id:"creating-a-migration-and-migrating"},"Creating a migration and migrating"),(0,a.kt)("h4",{id:"node-pg-migrate"},"node-pg-migrate"),(0,a.kt)("p",null,"If you do use ",(0,a.kt)("inlineCode",{parentName:"p"},"node-pg-migrate"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-migration-utils")," package has some helper methods + glue code to invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"node-pg-migrate")," with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"yarn ts-node ./node_modules/joist-migration-utils/build/index.js\n")),(0,a.kt)("p",null,"This will apply any ",(0,a.kt)("inlineCode",{parentName:"p"},"node-pg-migrate")," migrations located in your ",(0,a.kt)("inlineCode",{parentName:"p"},"./migrations/")," directory."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Joist is agnostic to your migration tool and will codegen based on your database schema. You're welcome to use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/salsita/node-pg-migrate"},"node-pg-migrate"),", Knex's ",(0,a.kt)("a",{parentName:"p",href:"http://knexjs.org/guide/migrations.html#migration-cli"},"migrations")," or another tool for migrations."))),(0,a.kt)("h3",{id:"run-joist-codegen"},"Run Joist codegen"),(0,a.kt)("p",null,"Define your local postgres credentials in a ",(0,a.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," environment variable, i.e. in an ",(0,a.kt)("inlineCode",{parentName:"p"},"local.env")," file similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"DATABASE_URL=postgres://joist:local@localhost:5435/joist\n")),(0,a.kt)("p",null,"With this env variable set, run the ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-codegen")," module, i.e. with ",(0,a.kt)("inlineCode",{parentName:"p"},"env")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"yarn ts-node ./node_modules/joist-codegen/build/index.js\n")),(0,a.kt)("p",null,"This will generate all the required files"),(0,a.kt)("h3",{id:"use-the-entities-in-your-production-code"},"Use the entities in your production code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { EntityManager, Author } from './entities';\nimport { newPgConnectionConfig, PostgresDriver } from 'joist-orm';\nimport { knex as createKnex, Knex } from 'knex';\n\nlet knex: Knex;\n\nfunction getKnex(): Knex {\n  return createKnex({\n    client: 'pg',\n    connection: newPgConnectionConfig() as any,\n    debug: false,\n    asyncStackTraces: true,\n  });\n}\n\nfunction newEntityManager(): EntityManager {\n  return new EntityManager({}, new PostgresDriver(getKnex()));\n}\n\nconst em = newEntityManager();\n\n\napp.get('/authors', async (req, res) => {\n  const authors = await em.find(\n    Author,\n    {},\n  );\n\n  res.send(authors);\n});\n")))}g.isMDXComponent=!0}}]);