"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[790],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=i,f=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4051:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(2685),i=n(1244),r=(n(7378),n(5318)),o=["components"],l={title:"Finders",sidebar_position:1},s=void 0,d={unversionedId:"querying/finders",id:"querying/finders",title:"Finders",description:"Joist's EntityManager has several methods for easily finding/loading entities.",source:"@site/docs/querying/finders.md",sourceDirName:"querying",slug:"/querying/finders",permalink:"/docs/querying/finders",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/querying/finders.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Finders",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"JSONB Fields",permalink:"/docs/modeling/jsonb-fields"},next:{title:"Create/Update/Delete",permalink:"/docs/querying/create-update-delete"}},c={},u=[{value:"<code>#load</code>",id:"load",level:3},{value:"<code>#loadAll</code>",id:"loadall",level:3},{value:"<code>#loadAllIfExists</code>",id:"loadallifexists",level:3},{value:"<code>#loadFromQuery</code>",id:"loadfromquery",level:3},{value:"<code>#find</code>",id:"find",level:3},{value:"<code>#findOne</code>",id:"findone",level:3},{value:"<code>#findOneOrFail</code>",id:"findoneorfail",level:3},{value:"<code>#findOrCreate</code>",id:"findorcreate",level:3}],m={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Joist's ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager")," has several methods for easily finding/loading entities."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"As a disclaimer, Joist does not yet have a full-blown query builder API that can support arbitrary SQL. It's primary focus is providing a robust framework to your implement core domain model (validation rules, hooks, and core one-to-many, many-to-one, etc. relations), and defers complex querying to a dedicated query library."),(0,r.kt)("p",{parentName:"div"},"That said, ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityManager")," has several methods (",(0,r.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"findAll"),", etc., documented below) that support common cases of finding entities by simple conditions and many-to-one joins, but for anything more complicated (one-to-many joins, many-to-many joins, or aggregates), for now the best practice is to use a dedicated query builder like Knex."),(0,r.kt)("p",{parentName:"div"},"Currently, we suggest using Knex, because it's what Joist also uses internally."))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Since these docs are still work-in-progress, you can also scan the unit tests in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/stephenh/joist-ts/blob/main/packages/integration-tests/src/EntityManager.test.ts"},"Joist repo")," for examples of queries."))),(0,r.kt)("h3",{id:"load"},(0,r.kt)("inlineCode",{parentName:"h3"},"#load")),(0,r.kt)("p",null,"Load an instance of a given entity and id."),(0,r.kt)("p",null,"This will return the existing ",(0,r.kt)("inlineCode",{parentName:"p"},"Author:1")," instance if it's already been loaded from the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst a = await em.load(Author, "a:1");\n')),(0,r.kt)("h3",{id:"loadall"},(0,r.kt)("inlineCode",{parentName:"h3"},"#loadAll")),(0,r.kt)("p",null,"Load multiple instances of a given entity and ids, and fails if any id does not exist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst a = await em.loadAll(Author, ["a:1", "a:2"]);\n')),(0,r.kt)("h3",{id:"loadallifexists"},(0,r.kt)("inlineCode",{parentName:"h3"},"#loadAllIfExists")),(0,r.kt)("p",null,"Load multiple instances of a given entity and ids, and ignores ids that don't exist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst a = await em.loadAllIfExists(Author, ["a:1", "a:2"]);\n')),(0,r.kt)("h3",{id:"loadfromquery"},(0,r.kt)("inlineCode",{parentName:"h3"},"#loadFromQuery")),(0,r.kt)("p",null,"Load multiple instances of a given entity from a Knex QueryBuilder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst authors = await em.loadFromQuery(Author, knex.select("*").from("authors"));\n')),(0,r.kt)("h3",{id:"find"},(0,r.kt)("inlineCode",{parentName:"h3"},"#find")),(0,r.kt)("p",null,"Query an entity and given where clause"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst authors = await em.find(Author, { email: "foo@bar.com" });\n')),(0,r.kt)("p",null,"You can also query based on an association"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const books = await em.find(Book, { author: { firstName: "a2" } });\n')),(0,r.kt)("h3",{id:"findone"},(0,r.kt)("inlineCode",{parentName:"h3"},"#findOne")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const em = newEntityManager();\nconst author = await em.findOne(Author, { email: 'foo@bar.com\" });\n")),(0,r.kt)("h3",{id:"findoneorfail"},(0,r.kt)("inlineCode",{parentName:"h3"},"#findOneOrFail")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst author = await em.findOneOrFail(Author, { email: "foo@bar.com" });\n')),(0,r.kt)("h3",{id:"findorcreate"},(0,r.kt)("inlineCode",{parentName:"h3"},"#findOrCreate")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const em = newEntityManager();\nconst author = await em.findOrCreate(Author, { email: "foo@bar.com" });\n')))}p.isMDXComponent=!0}}]);