"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[695],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),f=r,m=c["".concat(s,".").concat(f)]||c[f]||u[f]||a;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<a;d++)l[d]=n[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5769:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=n(2685),r=(n(7378),n(5318));const a={title:"Soft Deletes",sidebar_position:6},l=void 0,i={unversionedId:"features/soft-deletes",id:"features/soft-deletes",title:"Soft Deletes",description:'Joist has built-in support for the soft-delete pattern, of marking rows with a deleted_at column and then "mostly ignoring them" within the application.',source:"@site/docs/features/soft-deletes.md",sourceDirName:"features",slug:"/features/soft-deletes",permalink:"/docs/features/soft-deletes",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/features/soft-deletes.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Soft Deletes",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Tagged Ids",permalink:"/docs/features/tagged-ids"},next:{title:"graphql-filters",permalink:"/docs/features/graphql-filters"}},s={},d=[{value:"Setup",id:"setup",level:3},{value:"Behavior",id:"behavior",level:3},{value:"Notes",id:"notes",level:3}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Joist has built-in support for the soft-delete pattern, of marking rows with a ",(0,r.kt)("inlineCode",{parentName:"p"},"deleted_at"),' column and then "mostly ignoring them" within the application.'),(0,r.kt)("p",null,'In our experience, it\'s common to have application bugs where business logic "forgets to ignore soft-deleted rows", so Joist flips the model to where soft-deleted rows are ',(0,r.kt)("em",{parentName:"p"},"ignored by default"),", and business logic needs to explicitly opt-in to seeing them."),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To use Joist's soft-delete support, just add ",(0,r.kt)("inlineCode",{parentName:"p"},"deleted_at")," columns to any entity you want to soft-delete."),(0,r.kt)("p",null,"If you want to change the name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"deleted_at")," column, you can configure that in ",(0,r.kt)("inlineCode",{parentName:"p"},"joist-config.json"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"timestampFields")," key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "timestampFields": {\n    "deletedAt": {\n      "names": ["deleted_at"],\n      "required": true\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Note that currently Joist assumes that ",(0,r.kt)("inlineCode",{parentName:"p"},"deleted_at")," columns are timestamps, but they should work as ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," columns as well."),(0,r.kt)("h3",{id:"behavior"},"Behavior"),(0,r.kt)("p",null,"When rows are soft-deleted, Joist will still fetch them from the database, but any accessors will, by default, filter them out of the results."),(0,r.kt)("p",null,"For example, if an ",(0,r.kt)("inlineCode",{parentName:"p"},"Author")," has a soft-deleted ",(0,r.kt)("inlineCode",{parentName:"p"},"Book"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// This loads all books for a:1 from the db\nconst a = await em.load(Author, "a:1", "books");\n// This list will not include any soft-deletes books\nconsole.log(a.books.get);\n')),(0,r.kt)("p",null,"If you do want to explicitly access soft-deleted rows, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getWithDeleted")," accessor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// This list will be everything\nconsole.log(a.books.getWithDeleted);\n")),(0,r.kt)("h3",{id:"notes"},"Notes"),(0,r.kt)("p",null,"Currently, Joist does not implicitly modify any SQL queries to ignore soft-deleted rows."),(0,r.kt)("p",null,"For example ",(0,r.kt)("inlineCode",{parentName:"p"},'em.find(Book, { title: "t1" })')," does not inject a ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE deleted_at IS NOT NULL")," into the SQL query, so it will return soft-deleted books."),(0,r.kt)("p",null,"The rationale for this is a combination of:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Implementation simplicity, it's easier to let SQL queries fetch all rows and then filter them in-memory"),(0,r.kt)("li",{parentName:"ol"},"If soft-deleted rows are not loaded up-front, then the ",(0,r.kt)("inlineCode",{parentName:"li"},"getWithDeleted")," opt-in method would need to be ",(0,r.kt)("inlineCode",{parentName:"li"},"async"),', to "go back to the database" and now fetch the rest of the rows.')),(0,r.kt)("p",null,"Granted, this does have the downside of likely needlessly fetching soft-deleted rows; if you have a large amount of soft-deleted rows such that this is problematic, then you can either:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Just manually add ",(0,r.kt)("inlineCode",{parentName:"li"},"{ deletedAt: null }")," conditions to your queries, or"),(0,r.kt)("li",{parentName:"ul"},'Work on adding this "implicitly update ',(0,r.kt)("inlineCode",{parentName:"li"},"WHERE"),' clauses" feature to Joist')))}u.isMDXComponent=!0}}]);