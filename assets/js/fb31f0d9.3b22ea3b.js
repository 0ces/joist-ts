"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88],{5318:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var o=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7519:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var o=t(2685),r=t(1244),a=(t(7378),t(5318)),i=["components"],l={title:"Many To Ones",sidebar_position:2},s=void 0,c={unversionedId:"modeling/one-to-manys",id:"modeling/one-to-manys",title:"Many To Ones",description:"Joist's codegen will look for m2o foreign keys like:",source:"@site/docs/modeling/one-to-manys.md",sourceDirName:"modeling",slug:"/modeling/one-to-manys",permalink:"/docs/modeling/one-to-manys",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/modeling/one-to-manys.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Many To Ones",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Validation Rules",permalink:"/docs/modeling/validation-rules"},next:{title:"One to Manys",permalink:"/docs/modeling/many-to-ones"}},u={},d=[{value:"Unloaded vs. Loaded",id:"unloaded-vs-loaded",level:3},{value:"In Sync Relations",id:"in-sync-relations",level:3}],p={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Joist's codegen will look for ",(0,a.kt)("inlineCode",{parentName:"p"},"m2o")," foreign keys like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'                                       Table "public.books"\n   Column   |           Type           | Collation | Nullable |              Default\n------------+--------------------------+-----------+----------+-----------------------------------\n id         | integer                  |           | not null | nextval(\'books_id_seq\'::regclass)\n author_id  | integer                  |           | not null |\n ...\nIndexes:\n    "books_pkey" PRIMARY KEY, btree (id)\n    "books_author_id_idx" btree (author_id)\nForeign-key constraints:\n    "books_author_id_fkey" FOREIGN KEY (author_id) REFERENCES authors(id) DEFERRABLE INITIALLY DEFERRED\n')),(0,a.kt)("p",null,'And automatically include them in the "other sides" ',(0,a.kt)("inlineCode",{parentName:"p"},"AuthorCodegen")," file as a collection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export abstract class AuthorCodegen {\n  readonly books: Collection<Author, Book> = hasMany(bookMeta, "books", "author", "author_id");\n}\n')),(0,a.kt)("h3",{id:"unloaded-vs-loaded"},"Unloaded vs. Loaded"),(0,a.kt)("p",null,"Because the ",(0,a.kt)("inlineCode",{parentName:"p"},"authors"),' table is the "other side" of the relationship, very few methods are available on ',(0,a.kt)("inlineCode",{parentName:"p"},"Collection")," when unloaded."),(0,a.kt)("p",null,"To be useful, the collection must be loaded with a populate hint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const a = await em.load(Author, "a:1", "books");\nconsole.log(a.books.get.length);\nconsole.log(a.books.get[0].title);\n')),(0,a.kt)("h3",{id:"in-sync-relations"},"In Sync Relations"),(0,a.kt)("p",null,"Joist will keep both sides of a m2o/o2m relationship sync, i.e.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Load the author with the books collection loaded\nconst a = await em.load(Author, "a:1", "books");\n// Load a book, and add it to our collection\nconst b = await em.load(Book, "b:1");\na.books.add(b);\n// This will print true\nconsole.log(b.author.get === a);\n')))}m.isMDXComponent=!0}}]);