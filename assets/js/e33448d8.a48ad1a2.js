"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[645],{5318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(f,a(a({ref:t},s),{},{components:n})):o.createElement(f,a({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(2685),i=(n(7378),n(5318));const r={title:"Entity Cloning",sidebar_position:4},a=void 0,l={unversionedId:"features/cloning",id:"features/cloning",title:"Entity Cloning",description:'Joist supporting cloning entities, to easily support feature requests like "duplicate this author", or "duplicate this author and all of their books".',source:"@site/docs/features/cloning.md",sourceDirName:"features",slug:"/features/cloning",permalink:"/docs/features/cloning",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/features/cloning.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Entity Cloning",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Soft Deletes",permalink:"/docs/features/soft-deletes"},next:{title:"Large Collections",permalink:"/docs/features/large-collections"}},p={},c=[],s={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'Joist supporting cloning entities, to easily support feature requests like "duplicate this author", or "duplicate this author and all of their books".'),(0,i.kt)("p",null,"To clone an entity, call ",(0,i.kt)("inlineCode",{parentName:"p"},"em.clone")," and pass a load-hint of the subgraph you want to be included in the ",(0,i.kt)("inlineCode",{parentName:"p"},"clone")," operation."),(0,i.kt)("p",null,"For example, to clone an ",(0,i.kt)("inlineCode",{parentName:"p"},"Author")," plus all of their ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),"s and all of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"BookReview"),"s, you can call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const a1 = await em.load(Author, "a:1");\nconst a2 = await em.clone(a1, { books: "reviews" })\n')),(0,i.kt)("p",null,"After the ",(0,i.kt)("inlineCode",{parentName:"p"},"em.clone")," is finished:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"a2")," will be a copy of ",(0,i.kt)("inlineCode",{parentName:"li"},"a1")," with all the same primitive field values, but a new primary key/new identity"),(0,i.kt)("li",{parentName:"ul"},"Each ",(0,i.kt)("inlineCode",{parentName:"li"},"Book")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"a1.books")," will have a new ",(0,i.kt)("inlineCode",{parentName:"li"},"Book")," instance created, and be correctly hooked up to ",(0,i.kt)("inlineCode",{parentName:"li"},"a2")," instead of the original ",(0,i.kt)("inlineCode",{parentName:"li"},"a1")),(0,i.kt)("li",{parentName:"ul"},"Each ",(0,i.kt)("inlineCode",{parentName:"li"},"BookReview")," in each ",(0,i.kt)("inlineCode",{parentName:"li"},"a1.books.reviews")," will have a new ",(0,i.kt)("inlineCode",{parentName:"li"},"BookReview")," instance created, and again be correctly up to the right newly-created ",(0,i.kt)("inlineCode",{parentName:"li"},"Book")," instance in ",(0,i.kt)("inlineCode",{parentName:"li"},"a2.books"))),(0,i.kt)("p",null,'Besides setting the correct "parent" ',(0,i.kt)("inlineCode",{parentName:"p"},"book.author")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"a2")," for each cloned child ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),", any other references/FKs in the newly-created entities that happened to point to also-cloned input entities (like ",(0,i.kt)("inlineCode",{parentName:"p"},"a1.favoriteBook")," pointing to ",(0,i.kt)("inlineCode",{parentName:"p"},"a1.books.get[0]"),") are adjusted to point to the correct/corresponding newly-cloned output entity."),(0,i.kt)("p",null,"Basically Joist will keep the subgraph of cloned entities intact."))}u.isMDXComponent=!0}}]);