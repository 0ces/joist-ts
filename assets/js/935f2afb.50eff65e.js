"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/getting-started","docId":"getting-started/overview"},{"type":"link","label":"Sample Project","href":"/docs/getting-started/sample-project","docId":"getting-started/sample-project"},{"type":"link","label":"Adding to Your Project","href":"/docs/getting-started/adding-to-your-project","docId":"getting-started/adding-to-your-project"},{"type":"link","label":"Schema Assumptions","href":"/docs/getting-started/schema-assumptions","docId":"getting-started/schema-assumptions"}]},{"type":"category","label":"Goals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/goals","docId":"goals/overview"},{"type":"link","label":"Code Generation","href":"/docs/goals/code-generation","docId":"goals/code-generation"},{"type":"link","label":"Avoiding N+1s","href":"/docs/goals/avoiding-n-plus-1s","docId":"goals/avoiding-n-plus-1s"},{"type":"link","label":"Type-Safe Relations","href":"/docs/goals/type-safe-relations","docId":"goals/type-safe-relations"},{"type":"link","label":"Great Tests","href":"/docs/goals/great-tests","docId":"goals/great-tests"}]},{"type":"category","label":"Domain Modeling","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/modeling","docId":"modeling/overview"},{"type":"link","label":"Nullable Columns","href":"/docs/modeling/nullable-columns","docId":"modeling/nullable-columns"},{"type":"link","label":"Many To Ones","href":"/docs/modeling/one-to-manys","docId":"modeling/one-to-manys"},{"type":"link","label":"One to Manys","href":"/docs/modeling/many-to-ones","docId":"modeling/many-to-ones"},{"type":"link","label":"One to Ones","href":"/docs/modeling/one-to-ones","docId":"modeling/one-to-ones"},{"type":"link","label":"Enum Tables","href":"/docs/modeling/enum-tables","docId":"modeling/enum-tables"},{"type":"link","label":"Polymorphic References","href":"/docs/modeling/polymorphic-references","docId":"modeling/polymorphic-references"},{"type":"link","label":"Derived Fields","href":"/docs/modeling/derived-fields","docId":"modeling/derived-fields"},{"type":"link","label":"Protected Fields","href":"/docs/modeling/protected-fields","docId":"modeling/protected-fields"},{"type":"link","label":"JSONB Fields","href":"/docs/modeling/jsonb-fields","docId":"modeling/jsonb-fields"},{"type":"link","label":"Lifecycle Hooks","href":"/docs/modeling/lifecycle-hooks","docId":"modeling/lifecycle-hooks"},{"type":"link","label":"Relation Helpers","href":"/docs/modeling/relation-helpers","docId":"modeling/relation-helpers"},{"type":"link","label":"Validation Rules","href":"/docs/modeling/validation-rules","docId":"modeling/validation-rules"}]},{"type":"category","label":"Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/features","docId":"features/overview"},{"type":"link","label":"Unit of Work","href":"/docs/features/unit-of-work","docId":"features/unit-of-work"},{"type":"link","label":"Fast Database Resets","href":"/docs/features/fast-database-resets","docId":"features/fast-database-resets"},{"type":"link","label":"Test Factories","href":"/docs/features/test-factories","docId":"features/test-factories"},{"type":"link","label":"Tagged Ids","href":"/docs/features/tagged-ids","docId":"features/tagged-ids"},{"type":"link","label":"Changed Fields","href":"/docs/features/changed-fields","docId":"features/changed-fields"},{"type":"link","label":"Bulk Operations","href":"/docs/features/bulk-operations","docId":"features/bulk-operations"},{"type":"link","label":"Cascading Deletions","href":"/docs/features/cascade-deletions","docId":"features/cascade-deletions"},{"type":"link","label":"graphql-filters","href":"/docs/features/graphql-filters","docId":"features/graphql-filters"},{"type":"link","label":"Lenses","href":"/docs/features/lenses","docId":"features/lenses"},{"type":"link","label":"Optimistic Locking","href":"/docs/features/optimistic-locking","docId":"features/optimistic-locking"},{"type":"link","label":"Partial Update APIs","href":"/docs/features/partial-update-apis","docId":"features/partial-update-apis"}]}]},"docs":{"features/bulk-operations":{"id":"features/bulk-operations","title":"Bulk Operations","description":"Joist aims for best-in-class performance by performing all INSERT, UPDATE, DELETE, and even SELECT operations in bulk/batch.","sidebar":"tutorialSidebar"},"features/cascade-deletions":{"id":"features/cascade-deletions","title":"Cascading Deletions","description":"You can have a parent cascade delete its children by doing:","sidebar":"tutorialSidebar"},"features/changed-fields":{"id":"features/changed-fields","title":"Changed Fields","description":"Each entity tracks which of its fields has changed within the current unit of work/EntityManager:","sidebar":"tutorialSidebar"},"features/fast-database-resets":{"id":"features/fast-database-resets","title":"Fast Database Resets","description":"To reset the database between each unit test, Joist generates a flush_database stored procedure that will delete all rows/reset the sequence ids:","sidebar":"tutorialSidebar"},"features/graphql-filters":{"id":"features/graphql-filters","title":"graphql-filters","description":"GraphQL-Compatible Filters","sidebar":"tutorialSidebar"},"features/lenses":{"id":"features/lenses","title":"Lenses","description":"As covered in type safe relations, Joist provides populate hints to more ergonomically traverse the object graph.","sidebar":"tutorialSidebar"},"features/optimistic-locking":{"id":"features/optimistic-locking","title":"Optimistic Locking","description":"Joist implements optimistic locking to avoid conflicting/dropped UPDATEs.","sidebar":"tutorialSidebar"},"features/overview":{"id":"features/overview","title":"Features Overview","description":"","sidebar":"tutorialSidebar"},"features/partial-update-apis":{"id":"features/partial-update-apis","title":"Partial Update APIs","description":"Joist has built-in support for building \\"partial update\\"-style APIs on top of your domain model.","sidebar":"tutorialSidebar"},"features/tagged-ids":{"id":"features/tagged-ids","title":"Tagged Ids","description":"Joist automatically \\"tags\\" entity ids, which means prefixing them with a per-entity identifier.","sidebar":"tutorialSidebar"},"features/test-factories":{"id":"features/test-factories","title":"Test Factories","description":"Joist generates customizable factories for easily creating test data.","sidebar":"tutorialSidebar"},"features/unit-of-work":{"id":"features/unit-of-work","title":"Unit of Work","description":"Joist\'s EntityManager acts as a Unit of Work, which caches the entities that are currently loaded/being mutated.","sidebar":"tutorialSidebar"},"getting-started/adding-to-your-project":{"id":"getting-started/adding-to-your-project","title":"Adding Joist to Your Project","description":"(TODO: Rewrite/finish this.)","sidebar":"tutorialSidebar"},"getting-started/overview":{"id":"getting-started/overview","title":"Overview","description":"There are currently two ways to get started with Joist:","sidebar":"tutorialSidebar"},"getting-started/sample-project":{"id":"getting-started/sample-project","title":"Sample Project","description":"The Joist Sample App is a minimal repository setup with Joist.","sidebar":"tutorialSidebar"},"getting-started/schema-assumptions":{"id":"getting-started/schema-assumptions","title":"Schema Assumptions","description":"Joist makes several assumptions about your database schema, as described below.","sidebar":"tutorialSidebar"},"goals/avoiding-n-plus-1s":{"id":"goals/avoiding-n-plus-1s","title":"Avoiding N+1s","description":"Joist is built on top of Facebook\'s dataloader library, which allows it fundamentally avoid N+1s in a systematic way that almost always \\"just works\\".","sidebar":"tutorialSidebar"},"goals/code-generation":{"id":"goals/code-generation","title":"Code Generation","description":"One of the primary ways Joist achieves ActiveRecord-level productivity and DRY-ness is by leveraging continual, schema-driven code generation.","sidebar":"tutorialSidebar"},"goals/great-tests":{"id":"goals/great-tests","title":"Great Tests","description":"Joist focuses not just on great production code & business logic, but also on great testing of that business logic, by facilitating tests that are:","sidebar":"tutorialSidebar"},"goals/overview":{"id":"goals/overview","title":"Goals","description":"The high-level goal of Joist is to bring ActiveRecord-level productivity to TypeScript/Node projects.","sidebar":"tutorialSidebar"},"goals/type-safe-relations":{"id":"goals/type-safe-relations","title":"Type-Safe Relations","description":"Joist models all relations as async-by-default (i.e. you must access them via an await-d .load() call).","sidebar":"tutorialSidebar"},"modeling/derived-fields":{"id":"modeling/derived-fields","title":"Derived Fields","description":"Derived fields are field values (i.e. primitives) that can be calculated from other data within your domain model.","sidebar":"tutorialSidebar"},"modeling/enum-tables":{"id":"modeling/enum-tables","title":"Enum Tables","description":"Joist supports enum tables for modeling fields that can be set to a fixed number of values (i.e. state, status, and other fields)","sidebar":"tutorialSidebar"},"modeling/jsonb-fields":{"id":"modeling/jsonb-fields","title":"JSONB Fields","description":"Postgres has rich support for storing JSON, which Joist supports.","sidebar":"tutorialSidebar"},"modeling/lifecycle-hooks":{"id":"modeling/lifecycle-hooks","title":"Lifecycle Hooks","description":"There are two lifecycle hooks","sidebar":"tutorialSidebar"},"modeling/many-to-ones":{"id":"modeling/many-to-ones","title":"One to Manys","description":"Joist\'s codegen will look for o2m \\"incoming\\" foreign keys like:","sidebar":"tutorialSidebar"},"modeling/nullable-columns":{"id":"modeling/nullable-columns","title":"Nullable Columns","description":"Joist\'s domain objects automatically model null and not null columns appropriately.","sidebar":"tutorialSidebar"},"modeling/one-to-manys":{"id":"modeling/one-to-manys","title":"Many To Ones","description":"Joist\'s codegen will look for m2o foreign keys like:","sidebar":"tutorialSidebar"},"modeling/one-to-ones":{"id":"modeling/one-to-ones","title":"One to Ones","description":"","sidebar":"tutorialSidebar"},"modeling/overview":{"id":"modeling/overview","title":"Modeling Options","description":"Joist focuses on providing multiple ways for you to best model your application\'s domain model.","sidebar":"tutorialSidebar"},"modeling/polymorphic-references":{"id":"modeling/polymorphic-references","title":"Polymorphic References","description":"Joist\'s polymorphic references enable modeling an entity (i.e. Book) that has a single field (i.e. a reference) that can be set to multiple (i.e. poly) types of other entities, but only 1 such entity at a time.","sidebar":"tutorialSidebar"},"modeling/protected-fields":{"id":"modeling/protected-fields","title":"Protected Fields","description":"You can mark a field as protected in joist-codegen.json, which will make the setter protected, so that only your entity\'s internal business logic can call it.","sidebar":"tutorialSidebar"},"modeling/relation-helpers":{"id":"modeling/relation-helpers","title":"Relation Helpers","description":"hasOneThrough","sidebar":"tutorialSidebar"},"modeling/validation-rules":{"id":"modeling/validation-rules","title":"Validation Rules","description":"Entities can have validation rules added that will be run during EntityManager.flush():","sidebar":"tutorialSidebar"}}}')}}]);